@inject TorontoOnlineServerStore TorontoOnlineServersStore
@inject MontrealOnlineServersStore MontrealOnlineServersStore
@inject OttawaOnlineServersStore OttawaOnlineServersStore
@inject CalgaryOnlineServersStore CalgaryOnlineServersStore
@inject HalifaxOnlineServersStore HalifaxOnlineServersStore
<div class="col">
    <div class="card @(SelectedCity.Equals(City, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")">
        <img class="img-fluid" src="@($"images/{City}.png")" alt="...">
        <div class="card-body">
            <button type="button" class="btn btn-primary" @onclick=@(()=>{SelectCity(City);})>@City</button>
        </div>
        <div>
            @switch (City)
            {
                case "Toronto":
                    <div class="card-footer text-muted">
                        <p>Number of servers online: @numberServersOnlineToronto</p>
                    </div>
                    break;
                case "Montreal":
                    <div class="card-footer text-muted">
                        <p>Number of servers online: @numberServersOnlineMontreal</p>
                    </div>
                    break;
                case "Ottawa":
                    <div class="card-footer text-muted">
                        <p>Number of servers online: @numberServersOnlineOttawa</p>
                    </div>
                    break;
                case "Calgary":
                    <div class="card-footer text-muted">
                        <p>Number of servers online: @numberServersOnlineCalgary</p>
                    </div>
                    break;
                case "Halifax":
                    <div class="card-footer text-muted">
                        <p>Number of servers online: @numberServersOnlineHalifax</p>
                    </div>
                    break;
                default:
                    break;
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string SelectedCity { get; set; } = "Toronto";

    [Parameter]
    public string City { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> SelectedCityCallback { get; set; }

    public int numberServersOnlineToronto;
    public int numberServersOnlineMontreal;
    public int numberServersOnlineOttawa;
    public int numberServersOnlineCalgary;
    public int numberServersOnlineHalifax;

    private void SelectCity(string city)
    {
        SelectedCityCallback.InvokeAsync(city);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            switch (City)
            {
                case "Toronto":
                    numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServersOnline();
                    TorontoOnlineServersStore.AddStateChangeListeners(OnTorontoServerStatusChange);
                    break;
                case "Montreal":
                    numberServersOnlineMontreal = MontrealOnlineServersStore.GetNumberServersOnline();
                    MontrealOnlineServersStore.AddStateChangeListeners(OnMontrealServerStatusChange);
                    break;
                case "Ottawa":
                    numberServersOnlineOttawa = OttawaOnlineServersStore.GetNumberServersOnline();
                    OttawaOnlineServersStore.AddStateChangeListeners(OnOttawaServerStatusChange);
                    break;
                case "Calgary":
                    numberServersOnlineCalgary = CalgaryOnlineServersStore.GetNumberServersOnline();
                    CalgaryOnlineServersStore.AddStateChangeListeners(OnCalgaryServerStatusChange);
                    break;
                case "Halifax":
                    numberServersOnlineHalifax = HalifaxOnlineServersStore.GetNumberServersOnline();
                    HalifaxOnlineServersStore.AddStateChangeListeners(OnHalifaxServerStatusChange);
                    break;
                default:
                    break;
            }
            StateHasChanged();
        }
    }

    private void OnTorontoServerStatusChange()
    {
        numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServersOnline();
        StateHasChanged();
    }

    private void OnMontrealServerStatusChange()
    {
        numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServersOnline();
        StateHasChanged();
    }

    private void OnOttawaServerStatusChange()
    {
        numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServersOnline();
        StateHasChanged();
    }

    private void OnCalgaryServerStatusChange()
    {
        numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServersOnline();
        StateHasChanged();
    }

    private void OnHalifaxServerStatusChange()
    {
        numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServersOnline();
        StateHasChanged();
    }
}
