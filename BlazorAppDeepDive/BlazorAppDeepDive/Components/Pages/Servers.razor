@page "/servers"
@page "/servers/back_from/{cityName}"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Servers</h3>
<br />
<br />
<CityListComponent @ref="cityListComponent" @rendermode="InteractiveServer" SelectedCityCallback="HandleSelectedCityCallback"></CityListComponent>
<br />

<SearchBarComponent style="width:200px;" @rendermode="InteractiveServer" @ref="searchBarComponent" SearchFilterCallback="HandleSearchServer"></SearchBarComponent>

<CascadingValue Name="SelectedCity" Value="@selectedCity">
    <ServerListComponent @rendermode="InteractiveServer" CityName="@selectedCity" SearchFilter="@serverFilter" AddParameter="@index.ToString()"></ServerListComponent>
</CascadingValue>
<p>
    <a href="/servername" class="btn btn-primary">Add Server</a>
    <button type="button" class="btn btn-info" onclick="@(()=>{index++;})">Send Parameter</button>
</p>

@code {
    public int index { get; set; } = 0;
    [Parameter]
    public string? CityName { get; set; }
    private string selectedCity = "Toronto";
    private List<Server> listServer = ServerRepository.GetServersByCity("Toronto");
    private string serverFilter = string.Empty;
    private CityListComponent cityListComponent;
    private SearchBarComponent searchBarComponent;

    private void HandleSearch() 
    {
        this.listServer = ServerRepository.SearchServers(serverFilter);
    }

    private void HandleSelectedCityCallback(string city)
    {
        this.selectedCity = city;
        serverFilter = string.Empty;
        searchBarComponent?.ClearSearchFilter();
    }

    private void HandleSearchServer(string filter)
    {
        this.serverFilter = filter;
        cityListComponent?.ClearSelectedCity();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (NavigationManager.Uri.Contains("back_from") && !string.IsNullOrEmpty(CityName))
            {
                selectedCity = CityName;
                StateHasChanged();
            }
        }
    }
}
