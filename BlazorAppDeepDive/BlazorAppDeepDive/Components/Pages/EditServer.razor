@page "/servers/edit/{id:int}"

@inject NavigationManager NavigationManager
@inject IServersEFCoreRepository ServersEFCoreRepository
@inject IJSRuntime JSRuntime

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<h3>Edit Server</h3>
@if(server!= null)
{
    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputNumber @bind-Value="server.ServerId" class="form-control" hidden />

        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control" />
            </Control>
            <ValidationControl>
                <ValidationMessage For="@(() => server.Name)" />
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control" />
            </Control>
            <ValidationControl>
                <ValidationMessage For="@(() => server.City)" />
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="Online">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input" />
            </Control>
        </FieldComponent>

        <br />
        <button class="btn btn-primary" type="submit">Update</button>
        &nbsp;
        <a href="/servers" class="btn btn-primary">Close</a>
    </EditForm>
}
@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "formServer")]
    public Server? server { get; set; }

    protected override void OnParametersSet()
    {
        server ??= ServersEFCoreRepository.GetServerById(Id);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you want to leave this pages?");
        if(!isConfirmed)
        {
            context.PreventNavigation();
        }
    }

    private void Submit()
    {
        try{
            if (server != null)
            {
                ServersEFCoreRepository.UpdateServer(server.ServerId, server);
                NavigationManager.NavigateTo($"/servers/back_from/{server.City}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
}
